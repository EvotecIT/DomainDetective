---
name: Test .NET

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'Docs/**'
      - 'Examples/**'
      - '.gitignore'
  pull_request:
    branches:
      - master

permissions:
  contents: read

env:
  DOTNET_VERSION: '8.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      testclasses: ${{ steps.collect.outputs.testclasses }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect test classes
        id: collect
        run: |
          classes=$(grep -h "public class" DomainDetective.Tests/Test*.cs \
            | sed -E 's/.*public class ([A-Za-z0-9_]+).*/\1/' \
            | sort \
            | jq -R -s -c 'split("\n")[:-1]')
          echo "testclasses=$classes" >> "$GITHUB_OUTPUT"

  build-windows:
    runs-on: windows-latest
    needs: generate-matrix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: '**/*.csproj'

      - name: Restore dependencies
        run: dotnet restore DomainDetective.sln

      - name: Build solution
        run: >
          dotnet build DomainDetective.sln
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --no-restore

      - name: Restore test project for packaging
        run: dotnet restore DomainDetective.Tests/DomainDetective.Tests.csproj

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            DomainDetective.Tests/bin
            DomainDetective.Tests/obj
            DomainDetective/bin
            DomainDetective/obj
            DomainDetective.CLI/bin
            DomainDetective.CLI/obj
            DomainDetective.PowerShell/bin
            DomainDetective.PowerShell/obj
            # Add any other project output paths if necessary
            # Ensure that project references are covered or build the entire solution
            # and then package the specific test project's needs.
            # For simplicity, including all likely needed obj folders.
            # A more precise approach might be needed if this grabs too much
            # or if specific assets from restore are in known locations (like packages cache).
            # However, actions/setup-dotnet cache should handle packages.
            # This focuses on project-specific restore outputs.

  test-windows:
    runs-on: windows-latest
    needs: [build-windows] # Removed generate-matrix from direct needs here
    name: Windows - All Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          # The download path should correspond to where the files were structured in the artifact
          # Assuming the artifact 'windows-build' now contains the necessary structure including DomainDetective.Tests/obj
          # If the artifact places everything into a flat structure, this path might need adjustment,
          # but typically it preserves the archived paths.
          # For now, let's assume the artifact 'windows-build' has contents like:
          #   DomainDetective.Tests/bin/...
          #   DomainDetective.Tests/obj/...
          #   DomainDetective/bin/...
          # etc.
          # So, downloading to the root should place them correctly.
          path: . # Download to the root of the workspace

      # Restore test project step is removed

      # yamllint disable rule:line-length
      - name: Run all tests
        shell: pwsh
        run: |
          dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj `
              --configuration $env:BUILD_CONFIGURATION `
              --framework net8.0 `
              --no-build `
              --no-restore `
              --verbosity normal `
              --logger "trx;LogFileName=all-tests-windows.trx" `
              --collect:"XPlat Code Coverage" `
              --results-directory results/windows `
              --blame-hang-timeout 2m `
              --blame-hang-dump-type none
      # yamllint enable rule:line-length

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows
          path: |
            results/windows/**/*.trx
            **/all-tests-windows.trx

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-windows
          path: |
            results/windows/**/coverage.cobertura.xml
            # The specific path to coverage.cobertura.xml might be directly in results/windows
            # or in a subfolder depending on how dotnet test structures it with --results-directory
            # Adjust if necessary. Usually, it's in a subdirectory named after the test run/project.
            # For XPlat Code Coverage, it's often in a uniquely named folder inside the results directory.
            # Using a wildcard to catch it.
            results/windows/*/coverage.cobertura.xml

      # Upload coverage to Codecov step is removed from here

  build-ubuntu:
    runs-on: ubuntu-latest
    needs: generate-matrix
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: '**/*.csproj'

      - name: Restore dependencies
        run: dotnet restore DomainDetective.sln

      - name: Build solution
        run: >
          dotnet build DomainDetective.sln
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --no-restore

      - name: Restore test project for packaging
        run: dotnet restore DomainDetective.Tests/DomainDetective.Tests.csproj

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build
          path: |
            DomainDetective.Tests/bin
            DomainDetective.Tests/obj
            DomainDetective/bin
            DomainDetective/obj
            DomainDetective.CLI/bin
            DomainDetective.CLI/obj
            DomainDetective.PowerShell/bin
            DomainDetective.PowerShell/obj
            # Add any other project output paths if necessary
            # Ensure that project references are covered or build the entire solution
            # and then package the specific test project's needs.
            # For simplicity, including all likely needed obj folders.
            # A more precise approach might be needed if this grabs too much
            # or if specific assets from restore are in known locations (like packages cache).
            # However, actions/setup-dotnet cache should handle packages.
            # This focuses on project-specific restore outputs.

  test-ubuntu:
    runs-on: ubuntu-latest
    needs: [build-ubuntu] # Removed generate-matrix from direct needs here
    name: Ubuntu - All Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-build
          path: . # Download to the root of the workspace

      # Restore test project step is removed

      # yamllint disable rule:line-length
      - name: Run all tests
        shell: bash
        run: |
          dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj \
              --configuration $BUILD_CONFIGURATION \
              --framework net8.0 \
              --no-build \
              --no-restore \
              --verbosity normal \
              --logger "trx;LogFileName=all-tests-ubuntu.trx" \
              --collect:"XPlat Code Coverage" \
              --results-directory results/ubuntu \
              --blame-hang-timeout 2m \
              --blame-hang-dump-type none
      # yamllint enable rule:line-length

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-ubuntu
          path: |
            results/ubuntu/**/*.trx
            **/all-tests-ubuntu.trx

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-ubuntu
          path: |
            results/ubuntu/**/coverage.cobertura.xml
            results/ubuntu/*/coverage.cobertura.xml # Catch coverage file

      # Upload coverage to Codecov step is removed from here

  test-macos:
    if: false  # Temporarily disabled
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: '**/*.csproj'

      - name: Restore dependencies
        run: dotnet restore DomainDetective.sln

      - name: Build solution
        run: >
          dotnet build DomainDetective.sln
          --configuration ${{ env.BUILD_CONFIGURATION }}
          --no-restore

      - name: Run tests
        run: |
          dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj \
            --configuration ${{ env.BUILD_CONFIGURATION }} \
            --framework net8.0 \
            --no-build \
            --verbosity normal \
            --logger trx \
            --collect:"XPlat Code Coverage" \
            --blame-hang-timeout 2m \
            --blame-hang-dump-type none

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-macos
          path: '**/*.trx'

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-macos
          path: '**/coverage.cobertura.xml'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: '**/coverage.cobertura.xml'

  collect-results:
    if: always()
    runs-on: ubuntu-latest
    name: Collect All Artifacts
    needs: [test-windows, test-ubuntu, collect-coverage-and-upload] # Ensure it runs after coverage upload
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected # This will download all artifacts from the run if no specific name is given.
                         # Or, we can specify names if we want to be more selective.
                         # For now, let's assume it's okay to download all of them.

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-test-artifacts
          path: collected

  collect-coverage-and-upload:
    if: always()
    runs-on: ubuntu-latest
    name: Collect & Upload Coverage
    needs: [test-windows, test-ubuntu]
    steps:
      - name: Checkout code # Needed by Codecov action to determine commit SHA etc.
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags for accurate commit info

      - name: Download Windows coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-windows
          path: coverage/windows

      - name: Download Ubuntu coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-ubuntu
          path: coverage/ubuntu

      # If macOS tests were enabled, would add a download step for its coverage here
      # - name: Download macOS coverage reports
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: coverage-reports-macos
      #     path: coverage/macos

      - name: List downloaded files # For debugging
        run: ls -R coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Recommended to use a token
          # The action will search for coverage files.
          # We can specify a directory, or let it search common locations.
          # Since we downloaded them into the 'coverage' directory:
          directory: ./coverage/
          files: ./coverage/windows/**/coverage.cobertura.xml,./coverage/ubuntu/**/coverage.cobertura.xml # Be explicit if needed
          # flags: windows,ubuntu # Optional: add flags to distinguish reports in Codecov UI
          # name: codecov-umbrella # Optional: a name for the upload
          fail_ci_if_error: true # Optional: Fail the CI if Codecov upload fails
