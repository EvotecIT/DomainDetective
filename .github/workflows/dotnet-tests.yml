name: Test .NET

on:
    push:
        branches:
            - master
        paths-ignore:
            - '*.md'
            - 'Docs/**'
            - 'Examples/**'
            - '.gitignore'
    pull_request:
        branches:
            - master

env:
    DOTNET_VERSION: '8.x'
    BUILD_CONFIGURATION: 'Release'

jobs:
    generate-matrix:
        runs-on: ubuntu-latest
        outputs:
            testclasses: ${{ steps.collect.outputs.testclasses }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Collect test classes
              id: collect
              run: |
                classes=$(grep -h "public class" DomainDetective.Tests/Test*.cs | sed -E 's/.*public class ([A-Za-z0-9_]+).*/\1/' | sort | jq -R -s -c 'split("\n")[:-1]')
                echo "testclasses=$classes" >> "$GITHUB_OUTPUT"

    test-windows:
        name: 'Windows'
        runs-on: windows-latest
        strategy:
            matrix:
                testclass: ${{ fromJson(needs.generate-matrix.outputs.testclasses) }}
        needs: generate-matrix
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}
                  cache: true
                  cache-dependency-path: '**/*.csproj'

            - name: Restore dependencies
              run: dotnet restore DomainDetective.sln

            - name: Build solution
              run: dotnet build DomainDetective.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: >-
                  dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj
                  --configuration ${{ env.BUILD_CONFIGURATION }}
                  --framework net8.0
                  --no-build
                  --verbosity normal
                  --logger trx
                  --collect:"XPlat Code Coverage"
                  --blame-hang-timeout 2m
                  --blame-hang-dump-type none
                  --filter "FullyQualifiedName~DomainDetective.Tests.${{ matrix.testclass }}"

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-windows-${{ matrix.testclass }}
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-windows-${{ matrix.testclass }}
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'

    test-ubuntu:
        name: 'Ubuntu'
        runs-on: ubuntu-latest
        strategy:
            matrix:
                testclass: ${{ fromJson(needs.generate-matrix.outputs.testclasses) }}
        needs: generate-matrix
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}
                  cache: true
                  cache-dependency-path: '**/*.csproj'

            - name: Restore dependencies
              run: dotnet restore DomainDetective.sln

            - name: Build solution
              run: dotnet build DomainDetective.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: >-
                  dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj
                  --configuration ${{ env.BUILD_CONFIGURATION }}
                  --framework net8.0
                  --no-build
                  --verbosity normal
                  --logger trx
                  --collect:"XPlat Code Coverage"
                  --blame-hang-timeout 2m
                  --blame-hang-dump-type none
                  --filter "FullyQualifiedName~DomainDetective.Tests.${{ matrix.testclass }}"

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-ubuntu-${{ matrix.testclass }}
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-ubuntu-${{ matrix.testclass }}
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'

    test-macos:
        if: false # Temporarily disabled
        name: 'macOS'
        runs-on: macos-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore DomainDetective.sln

            - name: Build solution
              run: dotnet build DomainDetective.sln --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

            - name: Run tests
              run: >-
                  dotnet test DomainDetective.Tests/DomainDetective.Tests.csproj
                  --configuration ${{ env.BUILD_CONFIGURATION }}
                  --framework net8.0
                  --no-build
                  --verbosity normal
                  --logger trx
                  --collect:"XPlat Code Coverage"
                  --blame-hang-timeout 2m
                  --blame-hang-dump-type none

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results-macos
                  path: '**/*.trx'

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: coverage-reports-macos
                  path: '**/coverage.cobertura.xml'

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: '**/coverage.cobertura.xml'
